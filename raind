#!/usr/bin/env python3
#
# This file is part of raind.
#
# raind is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# raind is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with raind.  If not, see <http://www.gnu.org/licenses/>.

"""Rain detector daemon for the Warwick one-metre telescope"""

# pylint: disable=broad-except
# pylint: disable=invalid-name

import datetime
import re
import threading
import time
import Pyro4
import serial
import warwick.observatory as observatory

# Set automatically when generating RPM package
SOFTWARE_VERSION = 'UNKNOWN'

SERIAL_PORT = '/dev/raindetector'
SERIAL_BAUD = 9600
SERIAL_TIMEOUT = 5

# pylint: disable=anomalous-backslash-in-string
DATA_REGEX = b'^\$(?P<port1>.)(?P<port2>.)\r\n$'
# pylint: enable=anomalous-backslash-in-string

class RainDaemon:
    """Daemon class that wraps the RS232 interface"""
    def __init__(self):
        self._lock = threading.Lock()
        self._running = True
        self._last_error = datetime.datetime.min
        self._regex = re.compile(DATA_REGEX, re.DOTALL)
        self._latest = None
        self._port = None
        self._send_rain_reset = False

        runloop = threading.Thread(target=self.run)
        runloop.daemon = True
        runloop.start()

    def run(self):
        """Main run loop"""
        while self._running:
            # Initial setup
            try:
                self._port = serial.Serial(SERIAL_PORT, SERIAL_BAUD, timeout=SERIAL_TIMEOUT)
            except Exception as exception:
                observatory.log.error('raind', 'Failed to connect to serial port (' \
                                      + str(exception) + ')')
                print(exception)
                print('Will retry in 10 seconds...')
                time.sleep(10.)
                continue

            try:
                print('Connected to', SERIAL_PORT)
                self._latest = None

                # Flush any stale state
                self._port.flushInput()
                self._port.flushOutput()

                # First line may have been only partially recieved
                self._port.readline()

                # Main run loop
                while self._running:
                    data = self._port.readline()
                    match = self._regex.match(data)

                    if match:
                        # Port 2 is currently unused, so we ignore it
                        port1 = int.from_bytes(match.group('port1'), byteorder='big')
                        safe_boards = bin(port1).count("1")
                        total_boards = 6

                        latest = {
                            'date': datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ'),
                            'software_version': SOFTWARE_VERSION,
                            'safe_boards': safe_boards,
                            'total_boards': total_boards,
                            'port1': port1,
                        }

                        with self._lock:
                            self._latest = latest

            except Exception as exception:
                self._port.close()
                observatory.log.error('raind', 'Failed to read serial port (' \
                                      + str(exception) + ')')
                print(exception)
                print('Will retry in 10 seconds...')
                time.sleep(10.)

    @Pyro4.expose
    def last_measurement(self):
        """Query the latest valid measurement."""
        with self._lock:
            return self._latest

if __name__ == '__main__':
    observatory.daemons.onemetre_rain.launch(RainDaemon())
